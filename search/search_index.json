{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"HOME"},{"location":"bubble/","text":"328. Odd Even Linked List","title":"328. Odd Even Linked List"},{"location":"bubble/#328-odd-even-linked-list","text":"","title":"328. Odd Even Linked List"},{"location":"insert/","text":"","title":"Insert"},{"location":"quick/","text":"328. Odd Even Linked List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com","title":"328. Odd Even Linked List"},{"location":"quick/#328-odd-even-linked-list","text":"","title":"328. Odd Even Linked List"},{"location":"quick/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"quick/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"quick/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"quick/#1","text":"Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"quick/#2","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"quick/#2_1","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"reverse/","text":"328. Odd Even Linked List \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002 \u53c2\u8003\u89e3\u7b54 \u53c2\u8003\u89e3\u7b541 Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com","title":"328. Odd Even Linked List"},{"location":"reverse/#328-odd-even-linked-list","text":"","title":"328. Odd Even Linked List"},{"location":"reverse/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"reverse/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42 \u539f\u5730\u7b97\u6cd5 \u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"reverse/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"reverse/#1","text":"Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"reverse/#2","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"reverse/#2_1","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1ahttp://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"sort%20-%20%E5%89%AF%E6%9C%AC/","text":"34. reverseList","title":"34. reverseList"},{"location":"sort%20-%20%E5%89%AF%E6%9C%AC/#34-reverselist","text":"","title":"34. reverseList"},{"location":"sort/","text":"{\\rtf1}","title":"Sort"}]}