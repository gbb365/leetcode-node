{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"HOME"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","text":"TreeMap \u00b6 \u603b\u4f53\u6982\u8ff0\uff1a TreeMap\u5b9e\u73b0\u4e86NavigableMap\uff08\u53ef\u4ee5\u8fd4\u56de\u7279\u5b9a\u6761\u4ef6\u6700\u8fd1\u5339\u914d\u7684\u5bfc\u822a\u65b9\u6cd5\uff09\uff0c\u800cNavigableMap\u53c8\u7ee7\u627f\u4e86\u4e86SortedMap\u63a5\u53e3\uff0c\u8fd9\u8bf4\u660eTreeMap\u662f**\u6392\u5e8f**\u7684 \u5e95\u5c42\u7ed3\u6784\u662f\u7ea2\u9ed1\u6811\uff0c\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662flog\uff08n\uff09 \u6784\u9020\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5143\u7d20\u7684\u81ea\u7136\u987a\u5e8f\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2aComparator(\u81ea\u5b9a\u4e49\u5bf9\u8c61\u8981\u91cd\u5199hashCode\uff08\uff09\u548cequals\uff08\uff09) \u57df \u00b6 /** * treeMap\u7684\u6392\u5e8f\u89c4\u5219\uff0c\u5982\u679c\u4e3anull\uff0c\u5219\u6839\u636e\u952e\u7684\u81ea\u7136\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f * * @serial */ private final Comparator <? super K > comparator ; /** * \u7ea2\u9ed1\u6570\u7684\u6839\u8282\u70b9 */ private transient Entry < K , V > root ; /** * \u7ea2\u9ed1\u6811\u8282\u70b9\u7684\u4e2a\u6570 */ private transient int size = 0 ; /** * treeMap\u7684\u7ed3\u6784\u6027\u4fee\u6539\u6b21\u6570\u3002\u5b9e\u73b0fast-fail\u673a\u5236\u7684\u5173\u952e\u3002 */ private transient int modCount = 0 ; \u6784\u9020\u65b9\u6cd5 \u00b6 TreeMap()\uff1a\u4f7f\u7528key\u7684\u81ea\u7136\u6392\u5e8f\u6765\u6784\u9020\u4e00\u4e2a\u7a7a\u7684treeMap\u3002 TreeMap(Comparator<? super K> comparator)\uff1a\u4f7f\u7528\u7ed9\u5b9a\u7684\u6bd4\u8f83\u5668\u6765\u6784\u9020\u4e00\u4e2a\u7a7a\u7684treeMap\u3002 TreeMap(Map<? extends K, ? extends V> m)\uff1a\u4f7f\u7528key\u7684\u81ea\u7136\u6392\u5e8f\u6765\u5c06\u4e00\u4e2a\u666e\u901aMap\u8f6c\u6362\u6210treeMap\uff0ctreeMap\u5305\u542b\u7ed9\u5b9amap\u4e2d\u6240\u6709\u7684\u952e\u503c\u5bf9\u3002 TreeMap(SortedMap m)\uff1a\u4f7f\u7528\u6307\u5b9a\u7684sortedMap\u6765\u6784\u9020treeMap\u3002treeMap\u4e2d\u542b\u6709sortedMap\u4e2d\u6240\u6709\u7684\u952e\u503c\u5bf9\uff0c\u952e\u503c\u5bf9\u987a\u5e8f\u548csortedMap\u4e2d\u76f8\u540c\u3002 put\uff08\uff09 \u00b6 \u627e\u5230\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u65b0\u5efa\u8282\u70b9\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u63d2\u5165 get\uff08...\uff09 \u00b6 public V get ( Object key ) { Entry < K , V > p = getEntry ( key ); return ( p == null ? null : p . value ); } remove(...) \u00b6 /** * \u5982\u679ckey\u5728treeMap\u4e2d\u5b58\u5728\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u65e7value\uff0c\u5426\u5219\u8fd4\u56denull * * @param key \u53c2\u6570key * @return \u5982\u679c\u8282\u70b9\u88ab\u5220\u9664\uff0c\u8fd4\u56de\u8282\u70b9\u7684value\uff0c\u5426\u5219\u8fd4\u56denull\u3002\u5f53\u7136\uff0c\u53ef\u80fdkey\u5bf9\u5e94\u7684value\u5c31\u662fnull * @throws ClassCastException \u5982\u679c\u6307\u5b9a\u53c2\u6570key\u4e3anull\u800c\u4e14map\u4f7f\u7528\u81ea\u7136\u6392\u5e8f\uff0c\u6216\u8005\u6bd4\u8f83\u5668\u4e0d\u5141\u8bb8key\u4e3anull */ public V remove ( Object key ) { //\u83b7\u53d6key\u5bf9\u5e94\u7684\u8282\u70b9 Entry < K , V > p = getEntry ( key ); //\u5982\u679c\u8282\u70b9\u4e3anull\uff0c\u8fd4\u56denull if ( p == null ) return null ; //\u8bb0\u5f55\u65e7value V oldValue = p . value ; //\u5220\u9664\u8282\u70b9 deleteEntry ( p ); //\u8fd4\u56de\u65e7value return oldValue ; } \u00b6 \u603b\u7ed3 \u00b6 TreeMap\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\uff0c\u80fd\u591f\u5b9e\u73b0\u6392\u5e8f\u3002\u5982\u679c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u5165\u4e86Comparator\u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u6839\u636ecompare\uff08o1,o2\uff09\u7684\u89c4\u5219\u8fdb\u884c\u6392\u5e8f\uff0c\u5426\u5219\u5c31\u662f\u4f7f\u7528Comparable\u7684compareTo\uff08o1\uff09\uff08\u524d\u63d0\u662f\u8fd9\u4e2a\u7c7b\u8981\u5b9e\u73b0\u4e86Comparable\u63a5\u53e3\uff09 \u56e0\u4e3a\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\uff0c\u6240\u4ee5\u6570\u636e\u7684\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(logn) TreeMap\u975e\u540c\u6b65\u7684\uff0c\u60f3\u8981\u540c\u6b65\u53ef\u4ee5\u4f7f\u7528Collections\u6765\u8fdb\u884c\u5c01\u88c5 \u60f3\u8981\u81ea\u5b9a\u4e49\u6bd4\u8f83\u5c31\u8981\u4f20\u5165\u91cd\u5199compare\u7684Comparator\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u5c31\u662f\u81ea\u7136\u6392\u5e8f\uff08\u81ea\u5b9a\u4e49\u7c7b\u4e5f\u8981\u5b9e\u73b0Comparable\u63a5\u53e3\uff09 key\u4e0d\u80fd\u4e3anull\uff0c\u4f46\u662fHashMap\u7684\u53ef\u4ee5\u4e3anull \u53c2\u8003\uff1a - https://blog.csdn.net/on_1y/article/details/27231855 - https://blog.csdn.net/panweiwei1994/article/details/77530819#t4","title":"TreeMap\u5b66\u4e60\u7b14\u8bb0"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#treemap","text":"\u603b\u4f53\u6982\u8ff0\uff1a TreeMap\u5b9e\u73b0\u4e86NavigableMap\uff08\u53ef\u4ee5\u8fd4\u56de\u7279\u5b9a\u6761\u4ef6\u6700\u8fd1\u5339\u914d\u7684\u5bfc\u822a\u65b9\u6cd5\uff09\uff0c\u800cNavigableMap\u53c8\u7ee7\u627f\u4e86\u4e86SortedMap\u63a5\u53e3\uff0c\u8fd9\u8bf4\u660eTreeMap\u662f**\u6392\u5e8f**\u7684 \u5e95\u5c42\u7ed3\u6784\u662f\u7ea2\u9ed1\u6811\uff0c\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662flog\uff08n\uff09 \u6784\u9020\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5143\u7d20\u7684\u81ea\u7136\u987a\u5e8f\u6392\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2aComparator(\u81ea\u5b9a\u4e49\u5bf9\u8c61\u8981\u91cd\u5199hashCode\uff08\uff09\u548cequals\uff08\uff09)","title":"TreeMap"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#_1","text":"/** * treeMap\u7684\u6392\u5e8f\u89c4\u5219\uff0c\u5982\u679c\u4e3anull\uff0c\u5219\u6839\u636e\u952e\u7684\u81ea\u7136\u987a\u5e8f\u8fdb\u884c\u6392\u5e8f * * @serial */ private final Comparator <? super K > comparator ; /** * \u7ea2\u9ed1\u6570\u7684\u6839\u8282\u70b9 */ private transient Entry < K , V > root ; /** * \u7ea2\u9ed1\u6811\u8282\u70b9\u7684\u4e2a\u6570 */ private transient int size = 0 ; /** * treeMap\u7684\u7ed3\u6784\u6027\u4fee\u6539\u6b21\u6570\u3002\u5b9e\u73b0fast-fail\u673a\u5236\u7684\u5173\u952e\u3002 */ private transient int modCount = 0 ;","title":"\u57df"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#_2","text":"TreeMap()\uff1a\u4f7f\u7528key\u7684\u81ea\u7136\u6392\u5e8f\u6765\u6784\u9020\u4e00\u4e2a\u7a7a\u7684treeMap\u3002 TreeMap(Comparator<? super K> comparator)\uff1a\u4f7f\u7528\u7ed9\u5b9a\u7684\u6bd4\u8f83\u5668\u6765\u6784\u9020\u4e00\u4e2a\u7a7a\u7684treeMap\u3002 TreeMap(Map<? extends K, ? extends V> m)\uff1a\u4f7f\u7528key\u7684\u81ea\u7136\u6392\u5e8f\u6765\u5c06\u4e00\u4e2a\u666e\u901aMap\u8f6c\u6362\u6210treeMap\uff0ctreeMap\u5305\u542b\u7ed9\u5b9amap\u4e2d\u6240\u6709\u7684\u952e\u503c\u5bf9\u3002 TreeMap(SortedMap m)\uff1a\u4f7f\u7528\u6307\u5b9a\u7684sortedMap\u6765\u6784\u9020treeMap\u3002treeMap\u4e2d\u542b\u6709sortedMap\u4e2d\u6240\u6709\u7684\u952e\u503c\u5bf9\uff0c\u952e\u503c\u5bf9\u987a\u5e8f\u548csortedMap\u4e2d\u76f8\u540c\u3002","title":"\u6784\u9020\u65b9\u6cd5"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#put","text":"\u627e\u5230\u7236\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u65b0\u5efa\u8282\u70b9\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u63d2\u5165","title":"put\uff08\uff09"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#get","text":"public V get ( Object key ) { Entry < K , V > p = getEntry ( key ); return ( p == null ? null : p . value ); }","title":"get\uff08...\uff09"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#remove","text":"","title":"remove(...)"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#keytreemapvaluenull-param-key-key-return-valuenullkeyvaluenull-throws-classcastexception-keynullmapkeynull-public-v-removeobject-key-key-entrykv-p-getentrykey-nullnull-if-p-null-return-null-value-v-oldvalue-pvalue-deleteentryp-value-return-oldvalue","text":"","title":"    /**\n * \u5982\u679ckey\u5728treeMap\u4e2d\u5b58\u5728\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u65e7value\uff0c\u5426\u5219\u8fd4\u56denull\n *\n * @param  key \u53c2\u6570key\n * @return \u5982\u679c\u8282\u70b9\u88ab\u5220\u9664\uff0c\u8fd4\u56de\u8282\u70b9\u7684value\uff0c\u5426\u5219\u8fd4\u56denull\u3002\u5f53\u7136\uff0c\u53ef\u80fdkey\u5bf9\u5e94\u7684value\u5c31\u662fnull\n * @throws ClassCastException \u5982\u679c\u6307\u5b9a\u53c2\u6570key\u4e3anull\u800c\u4e14map\u4f7f\u7528\u81ea\u7136\u6392\u5e8f\uff0c\u6216\u8005\u6bd4\u8f83\u5668\u4e0d\u5141\u8bb8key\u4e3anull\n */\npublic V remove(Object key) {\n    //\u83b7\u53d6key\u5bf9\u5e94\u7684\u8282\u70b9\n    Entry&lt;K,V&gt; p = getEntry(key);\n    //\u5982\u679c\u8282\u70b9\u4e3anull\uff0c\u8fd4\u56denull\n    if (p == null)\n        return null;\n    //\u8bb0\u5f55\u65e7value\n    V oldValue = p.value;\n    //\u5220\u9664\u8282\u70b9\n    deleteEntry(p);\n    //\u8fd4\u56de\u65e7value\n    return oldValue;\n}\n"},{"location":"TreeMap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#_3","text":"TreeMap\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\uff0c\u80fd\u591f\u5b9e\u73b0\u6392\u5e8f\u3002\u5982\u679c\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4f20\u5165\u4e86Comparator\u5bf9\u8c61\uff0c\u5c31\u53ef\u4ee5\u6839\u636ecompare\uff08o1,o2\uff09\u7684\u89c4\u5219\u8fdb\u884c\u6392\u5e8f\uff0c\u5426\u5219\u5c31\u662f\u4f7f\u7528Comparable\u7684compareTo\uff08o1\uff09\uff08\u524d\u63d0\u662f\u8fd9\u4e2a\u7c7b\u8981\u5b9e\u73b0\u4e86Comparable\u63a5\u53e3\uff09 \u56e0\u4e3a\u5e95\u5c42\u662f\u7ea2\u9ed1\u6811\uff0c\u6240\u4ee5\u6570\u636e\u7684\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(logn) TreeMap\u975e\u540c\u6b65\u7684\uff0c\u60f3\u8981\u540c\u6b65\u53ef\u4ee5\u4f7f\u7528Collections\u6765\u8fdb\u884c\u5c01\u88c5 \u60f3\u8981\u81ea\u5b9a\u4e49\u6bd4\u8f83\u5c31\u8981\u4f20\u5165\u91cd\u5199compare\u7684Comparator\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u5c31\u662f\u81ea\u7136\u6392\u5e8f\uff08\u81ea\u5b9a\u4e49\u7c7b\u4e5f\u8981\u5b9e\u73b0Comparable\u63a5\u53e3\uff09 key\u4e0d\u80fd\u4e3anull\uff0c\u4f46\u662fHashMap\u7684\u53ef\u4ee5\u4e3anull \u53c2\u8003\uff1a - https://blog.csdn.net/on_1y/article/details/27231855 - https://blog.csdn.net/panweiwei1994/article/details/77530819#t4","title":"\u603b\u7ed3"},{"location":"bubble/","text":"328. Odd Even Linked List \u00b6","title":"328. Odd Even Linked List"},{"location":"bubble/#328-odd-even-linked-list","text":"","title":"328. Odd Even Linked List"},{"location":"insert/","text":"","title":"Insert"},{"location":"quick/","text":"328. Odd Even Linked List \u00b6 \u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6 \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002 \u601d\u8def\u5206\u6790 \u00b6 \u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528**\u539f\u5730\u7b97\u6cd5**\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42**\u539f\u5730\u7b97\u6cd5**\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002 \u53c2\u8003\u89e3\u7b54 \u00b6 \u53c2\u8003\u89e3\u7b541 \u00b6 Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u00b6 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } \u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09 \u00b6 \u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1a http://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com","title":"328. Odd Even Linked List"},{"location":"quick/#328-odd-even-linked-list","text":"","title":"328. Odd Even Linked List"},{"location":"quick/#_1","text":"\u9898\u76ee\u63cf\u8ff0\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002 \u8bf7\u5c1d\u8bd5\u4f7f\u7528\u539f\u5730\u7b97\u6cd5\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes \u4e3a\u8282\u70b9\u603b\u6570\u3002 \u793a\u4f8b 1: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 1->3->5->2->4->NULL \u793a\u4f8b 2: \u8f93\u5165: 2->1->3->5->6->4->7->NULL \u8f93\u51fa: 2->3->6->7->1->5->4->NULL \u8bf4\u660e: \u5e94\u5f53\u4fdd\u6301\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u89c6\u4e3a\u5947\u6570\u8282\u70b9\uff0c\u7b2c\u4e8c\u4e2a\u8282\u70b9\u89c6\u4e3a\u5076\u6570\u8282\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u9898\u76ee\u96be\u5ea6\uff1a\u4e2d\u7b49\u3002 \u82f1\u6587\u7f51\u5740\uff1a 328. Odd Even Linked List \u3002 \u4e2d\u6587\u7f51\u5740\uff1a 328. \u5947\u5076\u94fe\u8868 \u3002","title":"\u9898\u76ee\u63cf\u8ff0\u548c\u96be\u5ea6"},{"location":"quick/#_2","text":"\u6c42\u89e3\u5173\u952e\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u628a\u6240\u6709\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u522b\u6392\u5728\u4e00\u8d77\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u6307\u7684\u662f\u8282\u70b9\u7f16\u53f7\u7684\u5947\u5076\u6027\uff0c\u800c\u4e0d\u662f\u8282\u70b9\u7684\u503c\u7684\u5947\u5076\u6027\u3002\u8bf7\u5c1d\u8bd5\u4f7f\u7528**\u539f\u5730\u7b97\u6cd5**\u5b8c\u6210\u3002\u4f60\u7684\u7b97\u6cd5\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(1)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u4e3a O(nodes)\uff0cnodes\u4e3a\u8282\u70b9\u603b\u6570\u3002\u9898\u76ee\u8981\u6c42**\u539f\u5730\u7b97\u6cd5**\u5b8c\u6210\uff0c\u90a3\u4e48\u5c31\u4e00\u5b9a\u5f97\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u4e86\u3002 \u601d\u8def1\uff1a\u53ef\u4ee5\u4f7f\u7528 LeetCode \u7b2c 86 \u9898\u9898\u89e3\u601d\u8def 2 \u5b8c\u6210\u3002 \u601d\u8def2\uff1a\u540c\u6837\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u5b8c\u6210\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\uff0c\u7279\u522b\u6ce8\u610f\u8981\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5224\u65ad\u3002","title":"\u601d\u8def\u5206\u6790"},{"location":"quick/#_3","text":"","title":"\u53c2\u8003\u89e3\u7b54"},{"location":"quick/#1","text":"Java \u5199\u6cd5\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } public ListNode(int[] nums) { if (nums == null || nums.length == 0) { throw new IllegalArgumentException(\"arr can not be empty\"); } this.val = nums[0]; ListNode curr = this; for (int i = 1; i < nums.length; i++) { curr.next = new ListNode(nums[i]); curr = curr.next; } } @Override public String toString() { StringBuilder s = new StringBuilder(); ListNode cur = this; while (cur != null) { s.append(cur.val + \" -> \"); cur = cur.next; } s.append(\"NULL\"); return s.toString(); } } public class Solution { public ListNode oddEvenList(ListNode head) { ListNode dummyNodeOdd = new ListNode(-1); ListNode dummyNodeEven = new ListNode(-1); ListNode curOdd = dummyNodeOdd; ListNode curEven = dummyNodeEven; int count = 0; while (head != null) { if (count % 2 == 0) { curOdd.next = head; curOdd = curOdd.next; } else { curEven.next = head; curEven = curEven.next; } head = head.next; count++; } curOdd.next = dummyNodeEven.next; // \u7279\u522b\u6ce8\u610f\uff1a\u6700\u540e\u8fd9\u4e00\u6b65\u4e0d\u80fd\u5fd8\u8bb0\uff0c\u5426\u5219\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5faa\u73af\u94fe\u8868 curEven.next = null; return dummyNodeOdd.next; } public static void main(String[] args) { int[] nums = {1, 2, 3, 4, 5}; ListNode head = new ListNode(nums); Solution solution = new Solution(); ListNode oddEvenList = solution.oddEvenList(head); System.out.println(oddEvenList); } }","title":"\u53c2\u8003\u89e3\u7b541"},{"location":"quick/#2","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } }","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"quick/#2_1","text":"\u6ce8\u610f1\uff1a\u6211\u4eec\u91c7\u7528\u4e00\u6b21\u8df3\u8fc7\u4e00\u4e2a\u8282\u70b9\u201c\u7a7f\u9488\u5f15\u7ebf\u201d\u7684\u529e\u6cd5\u6765\u5b8c\u6210\u8fd9\u4e2a\u95ee\u9898\uff1b \u6ce8\u610f2\uff1a\u5728 while \u5faa\u73af\u4f53\u4e2d\uff0c\u5982\u679c\u7ed3\u70b9\u4e2a\u6570\u662f\u5947\u6570\u7684\u8bdd\uff0c\u5076\u6570\u7d22\u5f15\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684 next \u6307\u9488\u4f1a\u6307\u5411\u4e00\u4e2a null \uff08\u56e0\u4e3a\u8df3\u8fc7\u4e00\u4e2a\u7ed3\u70b9\u6539\u53d8 next \u6307\u9488\u7684\u64cd\u4f5c\u662f\u4e00\u8d77\u8fdb\u884c\u7684\uff09\uff0c\u8fd9\u4e00\u70b9\u5b8c\u5168\u53ef\u4ee5\u5206\u7c7b\u8ba8\u8bba\uff0c\u56e0\u4e3a\u5c31\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = head.next; ListNode oddCur = oddHead; ListNode evenCur = evenHead; // \u6267\u884c\u5faa\u73af\u7684\u6761\u4ef6\u4e0d\u80fd\u5199\u9519 while (evenCur != null && evenCur.next != null) { oddCur.next = oddCur.next.next; evenCur.next = evenCur.next.next; oddCur = oddCur.next; evenCur = evenCur.next; } oddCur.next = evenHead; return oddHead; } } Python \u5199\u6cd5\uff1a # Definition for singly-linked list. class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: def oddEvenList(self, head): \"\"\" :type head: ListNode :rtype: ListNode \"\"\" if head is None or head.next is None: return head # odd \u5947\u6570 odd_head = head even_head = head.next odd_cur = odd_head even_cur = even_head while even_cur and even_cur.next: odd_cur.next = odd_cur.next.next even_cur.next = even_cur.next.next odd_cur = odd_cur.next even_cur = even_cur.next odd_cur.next = even_head return odd_head \u601d\u8def\u6982\u8ff0\uff1a \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6807\u8bb0\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\uff0c\u628a\u5947\u6570\u8282\u70b9\u548c\u5076\u6570\u8282\u70b9\u5206\u5f00\u3002\u6700\u540e\u628a\u5947\u6570\u8282\u70b9\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u5076\u6570\u8282\u70b9\u7684\u5f00\u59cb\u8282\u70b9\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u89c1\u4ee3\u7801\u3002 \u6211\u7684\u89e3\u7b54\uff1a class ListNode { int val; ListNode next; ListNode(int x) { val = x; } } public class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) { return head; } ListNode oddHead = head; ListNode evenHead = oddHead.next; ListNode oddNode = oddHead; ListNode evenNode = evenHead; ListNode currentNode = evenHead.next; boolean isodd = true; while (currentNode != null) { if (isodd) { oddNode.next = currentNode; oddNode = currentNode; } else { evenNode.next = currentNode; evenNode = currentNode; } isodd = !isodd; currentNode = currentNode.next; } isodd = !isodd; if (isodd) { oddNode.next = evenHead; evenNode.next = null; } else { oddNode.next = evenHead; } return oddHead; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution solution = new Solution(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u7f51\u53cb\u7684\u89e3\u7b54\uff1a http://blog.csdn.net/guicaisa/article/details/50557475 \u663e\u7136\uff0c\u7f51\u53cb\u7684\u89e3\u6cd5\u4f1a\u66f4\u7b80\u6d01\u4e00\u4e9b\uff1a \u6839\u636e\u7f51\u53cb\u7684\u89e3\u7b54\u81ea\u5df1\u5199\u4e86\u4e00\u904d\uff1a public class Solution2 { public ListNode oddEvenList(ListNode head) { if (head == null) { return head; } ListNode oddNode = head; ListNode evenNode = head.next; ListNode evenHead = evenNode; while (evenNode != null && evenNode.next != null) { oddNode.next = evenNode.next; oddNode = oddNode.next; evenNode.next = oddNode.next; evenNode = evenNode.next; } oddNode.next = evenHead; return head; } public static void main(String[] args) { ListNode node1 = createListNode(new int[]{1, 2, 3, 4, 5}); Solution2 solution = new Solution2(); ListNode result1 = solution.oddEvenList(node1); printLinkedList(result1); System.out.println(\"------\"); ListNode node2 = createListNode(new int[]{1, 2, 3, 4}); ListNode result2 = solution.oddEvenList(node2); printLinkedList(result2); System.out.println(\"------\"); ListNode node3 = createListNode(new int[]{1, 2}); ListNode result3 = solution.oddEvenList(node3); printLinkedList(result3); } public static ListNode createListNode(int[] nums) { if (nums.length == 0) { return null; } ListNode head = new ListNode(nums[0]); ListNode curNode = head; for (int i = 1; i < nums.length; i++) { curNode.next = new ListNode(nums[i]); curNode = curNode.next; } return head; } // \u8d85\u7ea7\u7b80\u5355\u7684\u4e00\u4e2a\u5de5\u5177\u65b9\u6cd5 public static void printLinkedList(ListNode head) { ListNode curNode = head; while (curNode != null) { System.out.printf(\"%s\\t\", curNode.val); curNode = curNode.next; } System.out.printf(\"null\"); } } \u672c\u7bc7\u6587\u7ae0\u7684\u5730\u5740\u4e3a https://liweiwei1419.github.io/leetcode-solution/leetcode-0328-odd-even-linked-list \uff0c\u5982\u679c\u6211\u7684\u9898\u89e3\u6709\u9519\u8bef\uff0c\u6216\u8005\u60a8\u6709\u66f4\u597d\u7684\u89e3\u6cd5\uff0c\u6b22\u8fce\u60a8\u544a\u8bc9\u6211 liweiwei1419@gmail.com","title":"\u53c2\u8003\u89e3\u7b542\uff08\u63a8\u8350\uff09"},{"location":"reverse/","text":"fucking \u00b6 public static void main ( String [] args ){ sout ( \"helloworld\" ) }","title":"fucking"},{"location":"reverse/#fucking","text":"public static void main ( String [] args ){ sout ( \"helloworld\" ) }","title":"fucking"},{"location":"sort%20-%20%E5%89%AF%E6%9C%AC/","text":"34. reverseList \u00b6","title":"34. reverseList"},{"location":"sort%20-%20%E5%89%AF%E6%9C%AC/#34-reverselist","text":"","title":"34. reverseList"},{"location":"sort/","text":"{\\rtf1}","title":"Sort"},{"location":"test/","text":"test \u00b6 class ListNode { int val ; ListNode next ; ListNode ( int x ) { val = x ; } \u6309\u4e2a\u7684 \u9ad8\u5206 } public class Solution { public ListNode oddEvenList ( ListNode head ) { if ( head == null || head . next == null ) { return head ; } ListNode oddHead = head ; ListNode evenHead = oddHead . next ; ListNode oddNode = oddHead ; ListNode evenNode = evenHead ; ListNode currentNode = evenHead . next ; boolean isodd = true ; while ( currentNode != null ) { if ( isodd ) { oddNode . next = currentNode ; oddNode = currentNode ; } else { evenNode . next = currentNode ; evenNode = currentNode ; } isodd = ! isodd ; currentNode = currentNode . next ; } isodd = ! isodd ; if ( isodd ) { oddNode . next = evenHead ; evenNode . next = null ; } else { oddNode . next = evenHead ; } return oddHead ; }","title":"test"},{"location":"test/#test","text":"class ListNode { int val ; ListNode next ; ListNode ( int x ) { val = x ; } \u6309\u4e2a\u7684 \u9ad8\u5206 } public class Solution { public ListNode oddEvenList ( ListNode head ) { if ( head == null || head . next == null ) { return head ; } ListNode oddHead = head ; ListNode evenHead = oddHead . next ; ListNode oddNode = oddHead ; ListNode evenNode = evenHead ; ListNode currentNode = evenHead . next ; boolean isodd = true ; while ( currentNode != null ) { if ( isodd ) { oddNode . next = currentNode ; oddNode = currentNode ; } else { evenNode . next = currentNode ; evenNode = currentNode ; } isodd = ! isodd ; currentNode = currentNode . next ; } isodd = ! isodd ; if ( isodd ) { oddNode . next = evenHead ; evenNode . next = null ; } else { oddNode . next = evenHead ; } return oddHead ; }","title":"test"}]}